#include <iostream>
#include <unordered_map>
#include <string>
#include <typeindex>
#include <typeinfo>

class Component {
public:
    virtual ~Component() {} // Make sure Component is polymorphic with a virtual destructor.
    // Define common functionality for components here.
};

class ComponentA : public Component {
    // Define ComponentA-specific functionality here.
};

class ComponentB : public Component {
    // Define ComponentB-specific functionality here.
};

class ComponentC : public Component {
    // Define ComponentC-specific functionality here.
};

class ComponentManager {
public:
    template <typename T>
    void addComponent(T* component) {
        components[typeid(T)] = component;
    }

    template <typename T>
    T* getComponent() const {
        auto it = components.find(typeid(T));
        if (it != components.end()) {
            return dynamic_cast<T*>(it->second);
        }
        return nullptr;
    }

private:
    std::unordered_map<std::type_index, Component*> components;
};

int main() {
    ComponentManager componentManager;

    // Example: Adding components to the manager
    componentManager.addComponent(new ComponentA());
    componentManager.addComponent(new ComponentB());
    componentManager.addComponent(new ComponentC());

    // Example: Accessing components from the manager
    ComponentA* componentA = componentManager.getComponent<ComponentA>();
    if (componentA) {
        // Use componentA.
    }

    // Clean up memory (delete components) when you're done with them.

    return 0;
}

